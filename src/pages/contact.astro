---
import Layout from '../layouts/Layout.astro'
import { profile } from '../settings'
import SocialIcons from '../components/ui/SocialIcons.astro'

const { title, institute } = profile
---

<Layout>
	<section class='py-12'>
		<h1 class='text-4xl font-bold mb-8'>Contact</h1>
		<p class='text-lg text-gray-600 mb-8'>
			Get in touch for research collaboration, academic discussions, or consulting opportunities.
		</p>
		
		<div class='grid grid-cols-1 lg:grid-cols-3 gap-8'>
			<!-- Contact Information - Smaller -->
			<div class='lg:col-span-1 space-y-6'>
				<div class='card bg-base-100 shadow-xl'>
					<div class='card-body p-4'>
						<h2 class='card-title text-lg mb-3'>Contact Information</h2>
						<div class='space-y-4'>
							<div class='flex items-center gap-3'>
								<div class='w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center'>
									<svg class='w-4 h-4 text-primary' fill='currentColor' viewBox='0 0 20 20'>
										<path d='M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z'></path>
										<path d='M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z'></path>
									</svg>
								</div>
								<div>
									<p class='font-semibold'>Email</p>
									<a href="mailto:hsn.hadipour@gmail.com" class='text-primary hover:underline'>
										hsn.hadipour@gmail.com
									</a>
								</div>
							</div>
							
							<div class='flex items-center gap-3'>
								<div class='w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center'>
									<svg class='w-4 h-4 text-primary' fill='currentColor' viewBox='0 0 20 20'>
										<path fill-rule='evenodd' d='M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z' clip-rule='evenodd'></path>
									</svg>
								</div>
								<div>
									<p class='font-semibold'>Office</p>
									<p class='text-gray-600'>{institute}</p>
									<p class='text-gray-600'>Faculty of Computer Science</p>
									<p class='text-gray-600'>Bochum, Germany</p>
								</div>
							</div>
							
							<div class='flex items-center gap-3'>
								<div class='w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center'>
									<svg class='w-4 h-4 text-primary' fill='currentColor' viewBox='0 0 20 20'>
										<path fill-rule='evenodd' d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z' clip-rule='evenodd'></path>
									</svg>
								</div>
								<div>
									<p class='font-semibold'>Position</p>
									<p class='text-gray-600'>{title}</p>
								</div>
							</div>
						</div>
						
						<div class='mt-4'>
							<h3 class='font-semibold text-sm mb-2'>Connect on Social Media</h3>
							<SocialIcons />
						</div>
					</div>
				</div>
			</div>
			
			<!-- Secure Terminal Interface - Bigger -->
			<div class='lg:col-span-2 space-y-6'>
				<div class='w-full'>
					<div class='bg-black border-2 border-green-400 rounded-lg p-6 font-mono text-sm shadow-2xl shadow-green-400/20'>
						<!-- Terminal Header -->
						<div class='flex items-center justify-between mb-4 border-b border-green-400 pb-2'>
							<div class='flex items-center space-x-2'>
								<div class='w-3 h-3 bg-red-500 rounded-full'></div>
								<div class='w-3 h-3 bg-yellow-500 rounded-full'></div>
								<div class='w-3 h-3 bg-green-500 rounded-full'></div>
							</div>
							<span class='text-green-400 text-xs'>secure@crypt0grapher:~$</span>
						</div>

						<!-- Terminal Output - Bigger -->
						<div id='terminal-output' class='bg-black text-green-400 p-4 rounded border border-green-400 h-80 overflow-y-auto mb-4 font-mono'>
							<!-- Messages will appear here -->
						</div>

						<!-- Terminal Input -->
						<div class='flex items-center space-x-2'>
							<span class='text-green-400'>root@secure:~#</span>
							<input
								id='terminal-input'
								type='text'
								placeholder='Enter secure message...'
								class='flex-1 bg-transparent border-none outline-none text-green-400 font-mono placeholder-green-600'
								onkeypress='handleTerminalInput(event)'
							/>
							<button 
								onclick='sendTerminalMessage()'
								class='px-4 py-2 bg-green-900 hover:bg-green-700 text-green-400 border border-green-400 rounded transition-colors font-mono text-xs'>
								[SEND]
							</button>
							<button 
								onclick='clearTerminal()'
								class='px-4 py-2 bg-red-900 hover:bg-red-700 text-red-400 border border-red-400 rounded transition-colors font-mono text-xs'>
								[CLEAR]
							</button>
						</div>

						<!-- Security Notice -->
						<div class='mt-4 text-xs text-amber-500 border-t border-amber-400 pt-2'>
							<span class='animate-pulse'>‚óè</span> HTTPS protects browser-to-website connection
							<span class='animate-pulse'>‚óè</span> n8n automation service can read message content 
							<span class='animate-pulse'>‚óè</span> Not end to end encrypted (intermediaries can access)
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Research Collaboration & Opportunities -->
	<section class='py-12 border-t'>
		<h2 class="text-3xl font-bold mb-8">Research Collaboration & Opportunities</h2>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			<div class="p-6 rounded-lg text-base-content bg-base-200">
				<h3 class="text-xl font-semibold mb-3">üî¨ Research Collaboration</h3>
				<p>Open to collaborative research in cryptanalysis, symmetric cryptography, and applied cryptographic protocol design. 
					Let's connect and discuss potential projects.</p>
			</div>
			<div class="p-6 rounded-lg text-base-content bg-base-200">
				<h3 class="text-xl font-semibold mb-3">üéì Academic Partnerships</h3>
				<p>Interested in joint publications, conference presentations, and academic exchanges. 
				   Available for guest lectures and workshop participation.</p>
			</div>
			<div class="p-6 rounded-lg text-base-content bg-base-200">
				<h3 class="text-xl font-semibold mb-3">üíº Consulting Services</h3>
				<p>Providing expert consultation on cryptographic implementations, security assessments, and protocol analysis for industry and academia.</p>
			</div>
			<div class="p-6 rounded-lg text-base-content bg-base-200">
				<h3 class="text-xl font-semibold mb-3">üë• Mentoring & Supervision</h3>
				<p>Available for supervising master and bachelor students. 
				   Open to mentoring and guidance throughout their research journey.</p>
			</div>
		</div>
	</section>
</Layout>

<script is:inline>
// Global variables
let currentMessage = '';

// Add message to terminal output with optional typing effect
function addToTerminal(text, className = '', withTyping = false, delay = 30) {
    const output = document.getElementById('terminal-output');
    if (!output) return;
    
    const line = document.createElement('div');
    if (className) line.className = className;
    
    if (withTyping && text.trim()) {
        // Typing effect
        let i = 0;
        line.textContent = '';
        output.appendChild(line);
        
        const typeInterval = setInterval(() => {
            if (i < text.length) {
                line.textContent += text.charAt(i);
                i++;
                output.scrollTop = output.scrollHeight;
            } else {
                clearInterval(typeInterval);
            }
        }, delay);
    } else {
        // Instant display for empty lines or when typing disabled
        line.textContent = text;
        output.appendChild(line);
    }
    
    output.scrollTop = output.scrollHeight;
}

// Handle Enter key press
function handleTerminalInput(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        const input = document.getElementById('terminal-input');
        const message = input ? input.value.trim() : '';
        
        if (message) {
            addToTerminal('> ' + message, 'text-green-400');
            currentMessage = message;
            if (input) input.value = '';
            sendTerminalMessage();
        }
    }
}

// Send message function
async function sendTerminalMessage() {
    const input = document.getElementById('terminal-input');
    let message = currentMessage || (input ? input.value.trim() : '');
    
    if (!message) {
        addToTerminal('Error: Empty message', 'text-red-400');
        return;
    }

    // SECURITY: Rate limiting check
    const now = Date.now();
    const lastSent = localStorage.getItem('lastMessageSent');
    const minInterval = 5000; // 5 seconds between messages
    
    if (lastSent && (now - parseInt(lastSent)) < minInterval) {
        const remaining = Math.ceil((minInterval - (now - parseInt(lastSent))) / 1000);
        addToTerminal(`Rate limit: Wait ${remaining} seconds before sending another message`, 'text-red-400');
        return;
    }

    // SECURITY: Message length validation
    if (message.length > 1000) {
        addToTerminal('Error: Message too long (max 1000 characters)', 'text-red-400');
        return;
    }

    // SECURITY: Enhanced content filtering with multiple encoding detection
    let decodedMessage = message;
    let doubleDecodedMessage = message;
    
    try {
        // First level URL decoding
        decodedMessage = decodeURIComponent(message);
        // Double decoding to catch double-encoded attacks
        doubleDecodedMessage = decodeURIComponent(decodedMessage);
    } catch (e) {
        // If decoding fails, use original message
    }
    
    // Also check for HTML entity decoding
    let htmlDecodedMessage = message
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#x27;/g, "'")
        .replace(/&#39;/g, "'")
        .replace(/&amp;/g, '&');
    
    const suspiciousPatterns = [
        /script[^>]*>/i,
        /javascript:/i,
        /data:text\/html/i,
        /<iframe/i,
        /eval\(/i,
        /document\.cookie/i,
        /on\w+\s*=/i,  // Event handlers like onclick, onerror, etc.
        /expression\s*\(/i,  // CSS expression attacks
        /vbscript:/i,  // VBScript protocol
        /livescript:/i,  // LiveScript protocol
        /mocha:/i,  // Mocha protocol
        /&#/i,  // HTML entity encoding attempts
        /%3c/i,  // URL encoded < character
        /%3e/i,  // URL encoded > character
        /%22/i,  // URL encoded " character
        /%27/i   // URL encoded ' character
    ];
    
    // Check original, decoded, double-decoded, and HTML decoded messages
    const messagesToCheck = [message, decodedMessage, doubleDecodedMessage, htmlDecodedMessage];
    for (const msgToCheck of messagesToCheck) {
        if (suspiciousPatterns.some(pattern => pattern.test(msgToCheck))) {
            addToTerminal('Error: Message contains potentially harmful content', 'text-red-400');
            addToTerminal('Security: Encoded/obfuscated attacks detected and blocked', 'text-yellow-400');
            return;
        }
    }

    // If called directly (button click), show the message first
    if (!currentMessage && message) {
        addToTerminal('> ' + message, 'text-green-400');
    }
    
    try {
        addToTerminal('Sending via HTTPS to n8n webhook...', 'text-blue-400');
        
        // SECURITY: Add request timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        const response = await fetch('https://crypt0grapher.app.n8n.cloud/webhook/3145da13-aca7-4299-8046-07bcae2173a7', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                // SECURITY: Add basic fingerprinting protection
                'X-Client-Version': '1.0.0'
            },
            body: JSON.stringify({
                message: message.substring(0, 1000), // Truncate message
                timestamp: new Date().toISOString(),
                source: 'terminal_contact',
                // SECURITY: Add client fingerprint for rate limiting on server side
                fingerprint: btoa(navigator.userAgent.substring(0, 50) + window.location.origin).substring(0, 32)
            }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);
        
        // SECURITY: Update rate limiting timestamp
        localStorage.setItem('lastMessageSent', now.toString());

        if (response.ok) {
            addToTerminal('Message delivered to n8n automation server', 'text-green-400');
            addToTerminal('Being forwarded to Hosein\'s Telegram now...', 'text-cyan-400');
        } else {
            addToTerminal('Message accepted by webhook server', 'text-green-400');
        }
        
        addToTerminal('', '');
        
    } catch (error) {
        if (error.name === 'AbortError') {
            addToTerminal('Request timeout - please try again', 'text-red-400');
        } else {
            addToTerminal('Network error - but message likely still delivered', 'text-yellow-400');
        }
        addToTerminal('', '');
    }
    
    // Clean up
    currentMessage = '';
    if (input) input.value = '';
}

// Clear terminal
function clearTerminal() {
    const output = document.getElementById('terminal-output');
    const input = document.getElementById('terminal-input');
    if (output) output.innerHTML = '';
    if (input) input.value = '';
    
    addToTerminal('Terminal cleared - ready for new message', 'text-green-400', true, 40);
    addToTerminal('', '');
}

// Initialize terminal content immediately
function initializeTerminal() {
    const output = document.getElementById('terminal-output');
    if (!output) return; // Exit if terminal not found
    
    // Don't reinitialize if content already exists (avoid duplication)
    if (output.children.length > 0) return;
    
    // Clear existing content first
    output.innerHTML = '';
    
    // Queue of messages to type out
    const messages = [
        { text: 'Contact Terminal - Message Security Analysis', class: 'text-green-400', typing: true, delay: 40 },
        { text: '==========================================', class: 'text-green-400', typing: true, delay: 15 },
        { text: '', class: '', typing: false },
        { text: 'Security analysis of your message path:', class: 'text-cyan-400', typing: true, delay: 50 },
        { text: '1. HTTPS encrypts browser-to-website connection', class: 'text-gray-400', typing: true, delay: 30 },
        { text: '2. Message sent to n8n over HTTPS but accessible within the n8n service', class: 'text-yellow-400', typing: true, delay: 30 },
        { text: '3. Forwarded to Telegram via their API', class: 'text-gray-400', typing: true, delay: 30 },
        { text: '4. Minimal data (timestamp) stored for rate limiting', class: 'text-gray-400', typing: true, delay: 30 },
        { text: '', class: '', typing: false },
        { text: 'This illustrates why end to end encryption is important for sensitive messages', class: 'text-amber-400', typing: true, delay: 30 },
        { text: 'Ready to send your message... (or not, if you\'re paranoid like a cryptographer üòâ)', class: 'text-yellow-400', typing: true, delay: 60 },
        { text: '', class: '', typing: false }
    ];
    
    let currentIndex = 0;
    
    function typeNextMessage() {
        if (currentIndex < messages.length) {
            const msg = messages[currentIndex];
            addToTerminal(msg.text, msg.class, msg.typing, msg.delay);
            currentIndex++;
            
            // Wait for typing to complete before next message
            const waitTime = msg.typing ? (msg.text.length * msg.delay) + 200 : 100;
            setTimeout(typeNextMessage, waitTime);
        } else {
            // All messages typed, focus on input
            const input = document.getElementById('terminal-input');
            if (input) input.focus();
        }
    }
    
    // Start typing sequence
    typeNextMessage();
}

// Initialize terminal - multiple event listeners for all scenarios
function setupTerminalInitialization() {
    // Immediate initialization if DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTerminal);
    } else {
        initializeTerminal();
    }
    
    // Also initialize on page visibility change (back/forward navigation)
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden && document.getElementById('terminal-output')) {
            setTimeout(initializeTerminal, 100); // Small delay to ensure DOM is ready
        }
    });
    
    // Initialize on focus (when returning to tab/window)
    window.addEventListener('focus', function() {
        if (document.getElementById('terminal-output')) {
            setTimeout(initializeTerminal, 100);
        }
    });
    
    // Astro-specific: initialize on page navigation
    document.addEventListener('astro:page-load', initializeTerminal);
}

// Run setup
setupTerminalInitialization();

// Make functions globally available
window.sendTerminalMessage = sendTerminalMessage;
window.clearTerminal = clearTerminal;
window.handleTerminalInput = handleTerminalInput;
</script>
</Layout>
