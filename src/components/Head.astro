---
import {template} from '@/settings'
interface Props {
	title: string
	description: string
	image: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const { title, description, image } = Astro.props

// Get GA4 ID from environment variable or fallback to production ID
const ga4Id = import.meta.env.PUBLIC_GA4_ID || 'G-HBMGDXVLKF'
---

<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<!-- Favicon -->
<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<meta name='generator' content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href={`${template.base}/sitemap-index.xml`} />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.url)} />

<!-- Google Analytics 4 -->
{ga4Id && (
<>
<script type="text/partytown" src={`https://www.googletagmanager.com/gtag/js?id=${ga4Id}`}></script>
<script type="text/partytown" define:vars={{ ga4Id }}>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', ga4Id, {
    page_title: document.title,
    page_location: window.location.href,
  });
</script>
</>
)}

<!-- MathJax Configuration -->
<script is:inline>
window.MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']],
    displayMath: [['$$', '$$'], ['\\[', '\\]']],
    processEscapes: true,
    processEnvironments: true,
    macros: {
      'DP': '\\text{DP}',
      'N': '\\mathcal{N}',
      'F': '\\mathbb{F}'
    }
  },
  options: {
    ignoreHtmlClass: 'tex2jax_ignore',
    processHtmlClass: 'tex2jax_process'
  }
};
</script>
<script async id="MathJax-script" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>

<!-- Theme selector scripts -->
<script is:inline>
  // CRITICAL: Set default theme FIRST before theme-change library loads
  // This ensures dark mode is default on first visit
  // Force night theme as default
  (function() {
    const currentTheme = localStorage.getItem('theme');
    if (!currentTheme || currentTheme === 'corporate') {
      localStorage.setItem('theme', 'night');
    }
  })();

  // Get stored theme or default to night (dark mode)
  const getStoredTheme = () => {
    const theme = localStorage.getItem('theme');
    return theme || 'night';
  }

  // Apply theme immediately to prevent flash
  const theme = getStoredTheme();
  document.documentElement.setAttribute('data-theme', theme);

  // Re-apply theme after navigation
  document.addEventListener('astro:after-swap', () => {
    const currentTheme = getStoredTheme();
    document.documentElement.setAttribute('data-theme', currentTheme);
  });
</script>
<!-- Load theme-change library -->
<script src="https://cdn.jsdelivr.net/npm/theme-change@2.0.2/index.js"></script>
<script is:inline>
	// Initialize theme-change after library loads (production-safe)
	function initThemeChange() {
		if (typeof themeChange !== 'undefined') {
			try {
				themeChange()
			} catch (error) {
				// Fallback for browsers that need delayed initialization
				setTimeout(() => {
					try {
						themeChange()
					} catch (error2) {
						console.error('Theme initialization failed:', error2);
					}
				}, 0);
			}
		} else {
			// Wait for library to load
			setTimeout(initThemeChange, 50);
		}
	}
	
	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initThemeChange);
	} else {
		initThemeChange();
	}

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    initThemeChange();
  });
</script>
